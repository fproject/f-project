<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////
//
// Â© Copyright f-project.net 2010-present.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
///////////////////////////////////////////////////////////////////////////////
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
		xmlns:ui="http://f-project.net/xmlns/fprj-ui/2015"
		alpha.disabled="0.5" minWidth="100" minHeight="19"> 
	
	<fx:Metadata>
		<![CDATA[ 
		[HostComponent("net.fproject.ui.datetime.DateField")]
		]]>
	</fx:Metadata> 
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			import mx.skins.spark.DateChooserNextMonthSkin;
			import mx.skins.spark.DateChooserNextYearSkin;
			import mx.skins.spark.DateChooserPrevMonthSkin;
			import mx.skins.spark.DateChooserPrevYearSkin;
			protected override function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				//Workaround for the Flex framework's state machine error
				if(this.currentState == "normalWithYearButtonAndOpen")
				{
					if(nextYearButton == null)
					{
						var f:Function = this["_DateFieldSkin_ButtonBase2_i"];
						if(f != null)
						{
							nextYearButton = f();
							dropDownGroup.addElement(nextYearButton);
						}						
					}
					if(prevYearButton == null)
					{
						f = this["_DateFieldSkin_ButtonBase3_i"];
						if(f != null)
						{
							prevYearButton = f();
							dropDownGroup.addElement(prevYearButton);
						}
					}
				}
				
				if(yearLabel != null && hostComponent.yearNavigationEnabled)
					yearLabel.right = 45;
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				if(monthLabel != null && !monthLabel.hasEventListener("widthChanged"))
					monthLabel.addEventListener("widthChanged", monthLabelWidthChanged);
			}
			
			protected function monthLabelWidthChanged(e:Event):void
			{
				if(yearLabel != null)
				{
					var diff:Number = monthLabel.width + 33 - yearLabel.x;
					if(nextYearButton != null && dropDownGroup.containsElement(nextYearButton))
						diff -= 2;
					
					var l:Number = monthLabel.x;
					if(diff >= -2)
						monthLabel.move(30 - diff, 11);
					else
						monthLabel.move(33, 11);
				}
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal"/>
		<s:State name="normalAndOpen" stateGroups="open"/>
		<s:State name="disabled"/>
		<s:State name="normalWithYearButton" stateGroups="withYearButton"/>
		<s:State name="normalWithYearButtonAndOpen" stateGroups="withYearButton,open"/>
		<s:State name="disabledWithYearButton" basedOn="disabled" stateGroups="withYearButton"/>
	</s:states>
	
	<s:PopUpAnchor id="popUpAnchor" displayPopUp.normal="false"
				   displayPopUp.open="true"
				   includeIn="open"
				   left="0" right="0" top="0" bottom="0" itemDestructionPolicy="auto" 
				   popUpPosition="below" popUpWidthMatchesAnchorWidth="false" >
		
		<s:Group id="dropDownGroup">

			<s:RectangularDropShadow id="dropShadow" blurX="0" blurY="10" alpha="0.45" distance="0"
									 angle="90" color="#000000" left="0" top="0" right="0" bottom="0"/>
			
			<s:Rect left="0" right="0" top="0" bottom="0">
				<s:stroke><s:SolidColorStroke weight="1" color="0x696969"/></s:stroke>
				<s:fill><s:SolidColor color="0xFFFFFF" /></s:fill>
			</s:Rect>
			
			<ui:AdvancedRect width="100%" height="30" 
							 leftBorderVisible="{getStyle('borderVisible')}"
							 rightBorderVisible="{getStyle('borderVisible')}"
							 topBorderVisible="{getStyle('borderVisible')}"
							 bottomBorderVisible="false">
				<ui:stroke><s:SolidColorStroke color="0x696969"/></ui:stroke>
				<ui:fill>
					<s:SolidColor color="0xE8E8E8" />
				</ui:fill>
			</ui:AdvancedRect>
			
			<s:ButtonBase id="prevMonthButton" 
						  skinClass="mx.skins.spark.DateChooserPrevMonthSkin" x="5" y="11"/>
			
			<s:Label id="monthLabel" x="33" y="11"/>
			<s:Label id="yearLabel" right="33" right.withYearButton="45" y="11" textAlign="right"/>
			<s:ButtonBase id="nextYearButton" includeIn="normalWithYearButtonAndOpen"
						  skinClass="mx.skins.spark.DateChooserNextYearSkin" right="30" y="9"/>
			<s:ButtonBase id="prevYearButton" includeIn="normalWithYearButtonAndOpen"
						  skinClass="mx.skins.spark.DateChooserPrevYearSkin" right="30" y="16"/>
			
			<s:ButtonBase id="nextMonthButton" 
						  skinClass="mx.skins.spark.DateChooserNextMonthSkin" right="5" y="11"/>
			
			<s:DataGroup id="weekDayHeaderDataGroup" top="42" left="6" right="6"
						 itemRenderer="net.fproject.themes.spark.skins.DateChooserWeekDayRenderer" >
				<s:layout>
					<s:TileLayout requestedColumnCount="7" requestedRowCount="1" columnWidth="24"
								  rowHeight="23" horizontalGap="0"/>
				</s:layout>
			</s:DataGroup>
			
			<s:DataGroup id="dataGroup" top="60" left="6" right="6"
						 itemRenderer="net.fproject.themes.spark.skins.DateChooserMonthDayRenderer">
				<s:layout>
					<s:TileLayout requestedColumnCount="7" requestedRowCount="6" 
								  columnWidth="25" rowHeight="20"
								  horizontalGap="0" verticalGap="0"/>
				</s:layout>
			</s:DataGroup>
			
			<!--Time Field-->
			<ui:TimeField top="{dataGroup.y + dataGroup.height + 10}" left="57" bottom="6" id="timeField" snapInterval="30"/> 
		</s:Group>
	</s:PopUpAnchor>
	
	<ui:DateFieldButton id="openButton" left="0" right="0" top="0" bottom="0" focusEnabled="false"
						icon="@Embed('CalendarIcon.png')"/>  
	
	<s:TextInput id="textInput" width="70" height="22"
			 left="0" right="26" top="2" bottom="2" verticalCenter="1" /> 
</s:Skin>
