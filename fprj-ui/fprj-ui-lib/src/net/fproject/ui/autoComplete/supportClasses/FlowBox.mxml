<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////
//
// Â© Copyright f-project.net 2010-present.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
///////////////////////////////////////////////////////////////////////////////
-->
<mx:Canvas
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:supportClasses="net.fproject.ui.autoComplete.supportClasses.*"
	implements="mx.managers.IFocusManagerComponent"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	borderStyle="inset" backgroundColor="#FFFFFF"
	clipContent="true">
	
	<fx:Metadata>
		[Event(name="change", type="flash.events.Event")]
		[Event(name="buttonClick", type="flash.events.Event")]		
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.containers.Canvas;
			import mx.core.EdgeMetrics;
			import mx.core.UIComponent;
			
			import spark.components.Group;
			
			protected var _showRemoveIcon:Boolean;
			protected var _showRemoveIconChanged:Boolean;
			
			protected var _inlineButton:UIComponent;
			protected var _inlineButtonChanged:Boolean;
			protected var _inlineButtonCanvas:Group;
			
			protected var _enableMultiRow:Boolean;
			
			protected var _tabIndex:int;
			protected var _tabIndexChanged:Boolean;
			
			[Bindable]
			public var showSpinner:Boolean;								
			
			public function set buttonEnabled(value:Boolean):void
			{
				if (_inlineButton)
				{
					_inlineButtonCanvas.enabled = value;
				}
			}
			
			override protected function focusInHandler(event:FocusEvent):void
			{
				drawFocus(true);													
			}
			
			override protected function focusOutHandler(event:FocusEvent):void
			{
				drawFocus(false);
			}
			
			protected function promptText_change(event:Event):void
			{
				dispatchEvent(event);
			}			
			
			override public function drawFocus(isFocused:Boolean):void
			{
				if(focusManager)
					super.drawFocus(isFocused);
			}
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if (_showRemoveIconChanged)
				{
					_showRemoveIconChanged = false;
					
					for (var i:int=0; i<numItems; i++)
					{
						var item:IFlowBoxItem = getItemAt(i);
						if (item is SelectedItem)
						{
							SelectedItem(item).showRemoveIcon = _showRemoveIcon;
						}
					}
				}
				
				if (_inlineButtonChanged)
				{
					_inlineButtonChanged = false;
					
					if (_inlineButton)
					{
						_inlineButton.tabEnabled = false;
						_inlineButton.addEventListener(MouseEvent.MOUSE_DOWN, handleButtonMouseDown);
						_inlineButton.addEventListener(MouseEvent.CLICK, handleButtonClick);
						
						_inlineButtonCanvas = new Group();
						_inlineButtonCanvas.addElement(_inlineButton);
						_inlineButton.hitArea = _inlineButtonCanvas;
						
						addInlineButtonCanvas();
					}
				}
				
				if (_tabIndexChanged)
				{
					_tabIndexChanged = false;
					prompt.tabIndex = _tabIndex;
				}
			}
			
			protected function handleButtonMouseDown(event:Event):void
			{
				event.stopPropagation();
			}
			
			protected function handleButtonClick(event:Event):void
			{
				dispatchEvent(new Event("buttonClick"));
			}			
			
			override public function set tabIndex(value:int):void
			{
				_tabIndex = value;
				_tabIndexChanged = true;
				
				invalidateProperties();
			}
			
			public function getItemPosition(comboItem:IFlowBoxItem):Point
			{
				var lastY:int;
				var col:uint;
				var row:uint;
				
				for (var i:int=0; i<numItems; i++)
				{
					var item:IFlowBoxItem = getItemAt(i);
					if (item.y > lastY)
					{
						col = 0;
						row++;
						lastY = item.y;
					}
					
					if (item == comboItem)
					{
						return new Point(col, row);
					}
					
					col++;
				}
				
				return null;
			}
			
			public function getItemByPosition(pos:Point):IFlowBoxItem
			{
				var lastY:int;
				var row:uint;
				var col:int;
				
				for (var i:int=0; i<numItems; i++)
				{
					var item:IFlowBoxItem = getItemAt(i);
					if (item.y > lastY)
					{
						col = 0;
						lastY = item.y;
						row++;
					}
					
					if (row == pos.y && col == pos.x)
					{
						return item as IFlowBoxItem;
					}
					
					col++;
				}
				
				return null;	
			}
			
			public function set inlineButton(value:UIComponent):void
			{
				if (_inlineButton)
				{
					removeInlineButtonCanvas();
				}
				
				_inlineButton = value;
				_inlineButtonChanged = true;
				
				invalidateProperties();
			}
			
			public function set showRemoveIcon(value:Boolean):void
			{
				_showRemoveIcon = value;
				_showRemoveIconChanged = true;
				
				invalidateProperties();
			}
			
			public function set enableMultiRow(value:Boolean):void
			{
				_enableMultiRow = value;
			}
			
			override protected function measure():void
			{
				super.measure();
				
				var comp:IFlowBoxItem = getItemAt(numItems - 1);
				var height:int = comp.y + comp.height;
				
				if (height > 0)
				{
					var vm:EdgeMetrics = viewMetricsAndPadding;
					height += vm.bottom + vm.top;
					
					measuredHeight = measuredMinHeight = height;
				}
			}
			
			/**
			 * @inheritDoc
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{	        	
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				var prevTallest:Number = 0;
				var prevWidest:Number = 0;
				var tallestForRow:Number = 0;
				var rowNumber:Number = -1;    
				var widestForColumn:Number = 0;
				var columnNumber:Number = -1;        
				
				var vm:EdgeMetrics = viewMetricsAndPadding;
				var sidePadding:int = vm.left + vm.right;
				
				for (var i:int = 0; i<numItems; i++)
				{
					var child:IFlowBoxItem = getItemAt(i);
					var prevChild:IFlowBoxItem;
					
					if (child.height >= tallestForRow)
					{
						prevTallest = tallestForRow;
						tallestForRow = child.height;
					}
					
					if (i == 0)
					{
						child.x = child.y = 0;
					}
					else
					{
						prevChild = getItemAt(i - 1);
						
						var newWidth:Number = prevChild.width + prevChild.x;
						var newHeight:Number = prevChild.y;
						
						if (_enableMultiRow && newWidth + child.minWidth > width - sidePadding)
						{
							child.x = 0;
							
							if (child.height == tallestForRow)
							{
								child.y = newHeight + prevTallest;
							}
							else
							{
								child.y = newHeight + tallestForRow;
							}
							
							tallestForRow = child.height;                 
						}
						else
						{
							child.x = newWidth;
							child.y = prevChild.y;
						}
					}
					
					if (child is PromptTextInput)
					{
						if (child.width + sidePadding > width)
						{
							child.width = width - sidePadding;
						}
						
						child.percentWidth = 100;
					}
				}
				
				if (_inlineButton)
				{
					_inlineButtonCanvas.width = _inlineButton.measuredWidth;
					_inlineButtonCanvas.height = prompt.height;
					
					_inlineButtonCanvas.x = width - _inlineButtonCanvas.width - 1;
					_inlineButtonCanvas.y = height - prompt.height - vm.bottom;
					
					if (verticalScrollBar)
					{
						_inlineButtonCanvas.x -= 16;
					}
					
					_inlineButton.y = _inlineButtonCanvas.height - _inlineButton.measuredHeight - ((prompt.height - _inlineButton.measuredHeight) / 2);
					
					prompt.textPadding = _inlineButtonCanvas.width + vm.right;
				}				
			}           
			
			public function getItemAt(index:int):IFlowBoxItem
			{
				return getChildAt(index) as IFlowBoxItem;
			}
			
			public function getItemIndex(item:IFlowBoxItem):int
			{
				if (this.contains(DisplayObject(item)))
					return getChildIndex(DisplayObject(item));
				else
					return -1;
					
			}
			
			public function get numItems():int
			{
				return numChildren;
			}
			
			public function addItemAt(item:IFlowBoxItem, index:int):IFlowBoxItem
			{
				return addChildAt(DisplayObject(item), index) as IFlowBoxItem;
			}
			
			public function removeItemAt(index:int):IFlowBoxItem
			{
				return removeChildAt(index) as IFlowBoxItem;
			}
			
			private function addInlineButtonCanvas():void
			{
				this.rawChildren.addChild(_inlineButtonCanvas);
			}
			
			private function removeInlineButtonCanvas():void
			{
				this.rawChildren.removeChild(_inlineButtonCanvas);
			}
		]]>
	</fx:Script>
	
	<supportClasses:PromptTextInput id="prompt" showClearButton="false" width="100%"
								change="promptText_change(event)" drawFocusBorder="false" showSpinner="{showSpinner}"/>
	
</mx:Canvas>