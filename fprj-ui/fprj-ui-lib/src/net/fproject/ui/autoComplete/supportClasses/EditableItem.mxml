<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////
//
// Â© Copyright f-project.net 2010-present.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
///////////////////////////////////////////////////////////////////////////////
-->
<s:TextArea
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	implements="net.fproject.ui.autoComplete.supportClasses.IFlowBoxItem"
	initialize="init(event)" tabChildren="false" tabEnabled="false"
	breakOpportunity="none"
	borderVisible="false" focusThickness="0">
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import net.fproject.utils.StringUtil;
			
			protected var _item:Object;
			protected var _allowMultipleSelection:Boolean;
			
			protected function init(e:FlexEvent):void
			{
				addEventListener(Event.CHANGE, changeHandler);
			}
			
			protected function changeHandler(event:Event):void
			{
				width = measureText(text).width + 10;
			}
			
			override public function get minWidth():Number
			{
				return measureText(text).width + 10;
			}
			
			override public function drawFocus(isFocused:Boolean):void
			{
				if(focusManager)
					super.drawFocus(isFocused);
			}
			
			public function setTextFocus():void
			{
				selectRange(0, 0)
				setFocus();
			}
			
			public function isTextSelected():Boolean
			{
				return (selectionAnchorPosition == 0 && selectionActivePosition == text.length - 1) ||
					(selectionActivePosition == 0 && selectionAnchorPosition == text.length - 1);
			}
			
			override protected function focusInHandler(event:FocusEvent):void
			{
				super.focusInHandler(event);
				drawFocus(false);
				
				text = StringUtil.trim(text, ',');
			}
			
			override protected function focusOutHandler(event:FocusEvent):void
			{
				super.focusOutHandler(event);
				if (_allowMultipleSelection)
				{
					text = StringUtil.trim(text, ',') + ",";
				}	
			}
			
			public function setSelectionBeginning():void
			{
				selectRange(0, 0)
			}
			
			public function setSelectionEnd():void
			{	
				selectRange(text.length - 1, text.length - 1);				
			}
			
			public function isCursorAtBeginning():Boolean
			{
				return selectionActivePosition == 0;
			}		
			
			public function isCursorAtEnd():Boolean
			{
				return selectionActivePosition == text.length - 1;
			}
			
			public function set allowMultipleSelection(value:Boolean):void
			{
				_allowMultipleSelection = value;
			}
			
			public function set item(value:Object):void
			{
				_item = value;
			}		
			
			public function get item():Object
			{
				return _item;
			}
			
			public function isEditable():Boolean
			{
				return true;
			}			
		]]>
	</fx:Script>
	
</s:TextArea>