auto.instance=Tự động khởi tạo instance cho một biến có kiểu interface hoặc abstract class bằng cách chỉ định implementation (factory) class cho interface/abstractor đó.
auto.instance.factory=Implementation class được sử dụng làm factory để tạo instance
implementation=Chỉ định implementation class cho một interface hoặc abstract class.
implementation.impl=Implementation class
implementation.abstractor=Abstractor class
event.handling=Tự động add event listener cho một member variable của một UI component class hoặc cho chính instance của class đó. Hơn thế nữa, việc add event listener này được tự động thực hiện khi member variable được gán giá trị. Điều này giúp ta không cần quan tâm đến thời điểm mà Flex framework khởi tạo giá trị cho những component động, chẳng hạn như các đối tượng SkinPart.
event.handling.dispatcher=Đường dẫn tên trường (field chain) dẫn đến một đối tượng con cháu của đối tượng gốc mặc định
event.handling.event=Tham số type của event, có thể nhận giá trị là một literal string của event type chẳng hạn như 'creationComplete', hoặc đường dẫn đến một hằng số static được định nghĩa trong một class, chẳng hạn như 'mx.events.CloseEvent.CLOSE'.
event.handling.handler=Event handler
event.handling.useCapture=Chỉ định event listener này sẽ xử lý cho capture phase hay cho target and bubbling phases của chuỗi event propagation.
event.handling.priority=Chỉ định độ ưu tiên của event listener. Mặc định là 0
event.handling.useWeakReference=Chỉ định event listerner này sẽ được cài đặt liên kết yếu với dispatcher, giúp tránh memory leak do không giải phóng được bộ nhớ của listener. Mặc định là false
property.binding=Thực hiện liên kết giá trị của một đối tượng nguồn (source) với một đối tượng đích (target) trong một ActionScript class, thay thế cho việc khai báo binding bằng MXML.
property.binding.host.chain=Đường dẫn tên trường (field chain) dẫn đến một đối tượng con cháu của đối tượng gốc mặc định
property.binding.source.event=Tên (type) của event sẽ trigger việc binding. Mặc định chỉ hỗ trợ &lt;code&gt;PropertyChangeEvent.PROPERTY_CHANGE&lt;/code&gt; và &lt;code&gt;SkinPartEvent.PART_ADDED&lt;/code&gt;, và &lt;code&gt;SkinPartEvent.PART_REMOVED&lt;/code&gt;
remote.object=Khai báo remote object truy cập đến một RESTful hoặc AMF endpoint
remote.object.name=Tên của remote service trong trường hợp AMF endpoint
remote.object.destination=Destination ID của endpoint, được định nghĩa trong file services-config.xml
remote.object.uri=URI của RESTful endpoint. Đây là base URI, khi kết hợp với tham số &lt;code&gt;route&lt;/code&gt; của &lt;code&gt;[RESTOperation]&lt;/code&gt; sẽ tạo ra URI đầy đủ&lt;/code&gt;
remote.object.model.class=Model class gắn với RESTful endpoint
rest.operation=Khai báo một operation truy cập đến một RESTful endpoint
rest.operation.method=HTTP Method của operation, có thể nhận các giá trị GET, PUT, POST, DELETE, HEAD, OPTION
rest.operation.returning=Khai báo kiểu trả về của lời gọi, giúp cho kết quả được deserialize thành strong-typed objects. Chẳng hạn 'MyModel[]' sẽ trả về mảng các đối tượng MyModel. Mặc định sẽ sử dụng modelClass được khai báo trong metadata của &lt;code&gt;[RemoteObject]&lt;/code&gt;
rest.operation.route=URI route của operation, chẳng hạn &lt;code&gt;'?criteria={0}&#38;page={1}&#38;per-page={2}&#38;sort={3}'&lt;/code&gt;
rest.operation.route.extra.params=Các tham số URI bổ sung, chẳng hạn &lt;code&gt;'expand=profile'&lt;/code&gt;
module.implementation=Implementation config cho module
module.implementation.relative.url=Đường dẫn tương đối đến file SWF của module, ví dụ 'task/TaskModule'
module.implementation.rsls=Danh sách các thư viện RSLs cần phải load trước khi load module này. Có thể chỉ định thứ tự load các RSL bằng cách đánh trọng số vào sau tên file SWF. Ví dụ: 'abc.swf, xyz.swf{0}, def.swf{1}'
component.implementation=Implementation config cho component
component.implementation.impl.class=Class path dẫn đến implementation class
component.implementation.rsls=Danh sách các thư viện RSLs cần phải load để có thể khởi tạo component này. Có thể chỉ định thứ tự load các RSL bằng cách đánh trọng số vào sau tên file SWF. Ví dụ: 'abc.swf, xyz.swf{0}, def.swf{1}'
marshall=Thông tin giúp Deserializer nhận biết sử dụng cách inject giá trị cho các trường của 1 class. Chú ý: trong trường hợp muốn inject bằng constructor thì [Marshall] phải được khai báo cho class
marshall.field=Tên của trường được inject
marshall.type=Trường hợp [Marshall] khai báo trước 1 trường kiểu Array, 'type' cho phép chỉ định kiểu cho phần tử của array này