package net.fproject.utils.DateTimeUtil
{
	import org.flexunit.Assert;
	import org.flexunit.asserts.assertEquals;
	import org.flexunit.asserts.assertFalse;
	import mx.core.mx_internal;
	import mx.formatters.DateBase;
	import mx.formatters.NumberFormatter;
	
	import net.fproject.fproject_internal;
	import net.fproject.utils.DateTimeUtil;

	/**
	 * FlexUnit test case class for method<br/>
	 * <code>public static function getTime(hours:Number, minutes:Number = 0, seconds:Number = 0, milliseconds:Number = 0):Number</code><br/>
	 * of class<br/>
	 * net.fproject.utils.DateTimeUtil
	 */
	public class DateTimeUtil_getTime
	{
		[Before]
		public function runBeforeEveryTest():void
		{
			//Your test data initialization
		}

		[After]
		public function runAfterEveryTest():void
		{
			//Your test data cleaning
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase001():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase002():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase003():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase004():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase005():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase006():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase007():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase008():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase009():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase010():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase011():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase012():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase013():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase014():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase015():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase016():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase017():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase018():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase019():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase020():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase021():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase022():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase023():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase024():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase025():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase026():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase027():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase028():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase029():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase030():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase031():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase032():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase033():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase034():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase035():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = 0, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase036():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase037():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase038():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase039():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase040():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase041():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase042():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase043():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase044():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase045():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase046():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase047():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase048():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase049():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase050():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase051():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase052():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase053():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase054():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase055():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase056():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase057():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase058():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase059():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase060():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase061():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase062():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase063():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase064():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase065():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase066():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase067():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase068():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase069():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase070():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase071():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase072():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase073():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase074():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase075():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase076():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase077():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase078():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase079():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase080():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase081():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase082():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase083():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase084():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase085():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase086():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase087():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase088():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase089():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase090():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase091():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase092():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase093():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase094():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase095():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase096():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase097():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase098():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase099():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase100():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase101():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase102():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase103():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase104():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase105():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase106():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase107():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase108():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase109():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase110():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase111():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase112():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase113():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase114():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase115():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase116():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase117():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase118():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase119():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase120():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase121():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase122():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase123():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase124():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase125():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase126():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase127():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase128():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase129():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase130():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase131():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase132():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase133():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase134():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase135():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase136():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase137():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase138():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase139():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase140():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase141():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase142():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase143():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase144():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase145():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase146():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase147():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase148():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase149():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase150():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase151():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase152():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase153():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase154():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase155():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase156():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase157():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase158():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase159():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase160():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase161():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase162():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase163():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase164():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase165():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase166():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase167():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase168():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase169():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase170():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase171():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase172():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase173():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase174():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase175():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase176():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase177():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase178():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase179():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase180():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase181():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase182():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase183():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase184():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase185():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase186():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase187():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase188():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase189():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase190():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase191():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase192():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase193():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase194():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase195():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase196():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase197():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase198():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase199():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase200():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase201():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase202():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase203():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase204():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase205():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase206():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase207():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase208():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase209():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase210():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase211():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase212():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase213():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase214():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase215():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = NaN, milliseconds = 0]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = 0</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase216():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = 0;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase217():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase218():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase219():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase220():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase221():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase222():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase223():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase224():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase225():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase226():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase227():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase228():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase229():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase230():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase231():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase232():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase233():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase234():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase235():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase236():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase237():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase238():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase239():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase240():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase241():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase242():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase243():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase244():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase245():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase246():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase247():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase248():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase249():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase250():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase251():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = 0, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase252():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase253():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase254():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase255():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase256():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase257():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase258():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase259():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase260():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase261():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase262():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase263():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase264():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase265():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase266():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase267():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase268():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase269():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase270():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase271():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase272():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase273():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase274():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase275():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase276():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase277():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase278():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase279():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase280():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase281():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase282():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase283():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase284():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase285():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase286():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase287():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase288():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase289():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase290():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase291():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase292():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase293():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase294():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase295():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase296():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase297():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase298():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase299():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase300():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase301():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase302():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase303():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase304():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase305():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase306():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase307():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase308():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase309():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase310():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase311():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase312():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase313():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase314():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase315():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase316():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase317():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase318():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase319():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase320():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase321():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase322():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase323():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase324():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase325():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase326():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase327():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase328():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase329():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase330():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase331():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase332():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase333():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase334():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase335():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase336():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase337():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase338():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase339():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase340():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase341():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase342():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase343():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase344():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase345():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase346():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase347():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase348():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase349():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase350():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase351():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase352():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase353():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase354():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase355():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase356():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase357():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase358():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase359():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase360():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase361():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase362():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase363():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase364():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase365():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase366():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase367():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase368():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase369():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase370():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase371():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase372():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase373():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase374():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase375():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase376():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase377():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase378():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase379():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase380():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase381():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase382():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase383():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase384():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase385():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase386():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase387():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase388():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase389():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase390():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase391():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase392():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase393():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase394():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase395():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase396():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase397():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase398():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase399():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase400():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase401():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase402():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase403():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase404():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase405():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase406():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase407():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase408():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase409():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase410():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase411():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase412():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase413():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase414():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase415():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase416():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase417():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase418():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase419():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase420():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase421():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase422():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase423():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase424():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase425():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase426():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase427():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase428():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase429():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase430():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase431():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = NaN, milliseconds = Number.POSITIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.POSITIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase432():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.POSITIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase433():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase434():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase435():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase436():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase437():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase438():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase439():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase440():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase441():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase442():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase443():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase444():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase445():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase446():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase447():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase448():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase449():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase450():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase451():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase452():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase453():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase454():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase455():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase456():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase457():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase458():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase459():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase460():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase461():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase462():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase463():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase464():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase465():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase466():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase467():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = 0, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase468():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase469():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase470():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase471():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase472():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase473():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase474():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase475():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase476():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase477():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase478():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase479():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase480():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase481():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase482():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase483():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase484():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase485():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase486():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase487():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase488():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase489():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase490():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase491():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase492():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase493():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase494():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase495():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase496():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase497():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase498():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase499():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase500():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase501():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase502():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase503():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase504():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase505():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase506():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase507():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase508():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase509():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase510():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase511():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase512():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase513():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase514():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase515():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase516():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase517():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase518():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase519():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase520():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase521():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase522():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase523():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase524():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase525():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase526():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase527():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase528():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase529():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase530():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase531():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase532():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase533():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase534():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase535():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase536():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase537():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase538():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase539():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase540():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase541():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase542():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase543():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase544():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase545():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase546():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase547():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase548():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase549():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase550():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase551():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase552():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase553():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase554():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase555():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase556():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase557():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase558():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase559():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase560():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase561():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase562():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase563():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase564():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase565():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase566():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase567():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase568():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase569():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase570():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase571():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase572():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase573():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase574():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase575():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase576():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase577():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase578():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase579():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase580():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase581():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase582():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase583():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase584():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase585():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase586():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase587():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase588():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase589():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase590():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase591():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase592():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase593():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase594():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase595():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase596():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase597():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase598():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase599():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase600():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase601():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase602():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase603():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase604():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase605():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase606():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase607():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase608():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase609():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase610():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase611():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase612():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase613():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase614():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase615():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase616():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase617():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase618():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase619():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase620():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase621():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase622():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase623():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase624():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase625():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase626():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase627():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase628():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase629():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase630():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase631():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase632():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase633():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase634():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase635():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase636():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase637():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase638():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase639():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase640():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase641():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase642():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase643():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase644():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase645():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase646():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase647():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = NaN, milliseconds = Number.NEGATIVE_INFINITY]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase648():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.NEGATIVE_INFINITY;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase649():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase650():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase651():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase652():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase653():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase654():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase655():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase656():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase657():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase658():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase659():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase660():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase661():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase662():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase663():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase664():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase665():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase666():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase667():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase668():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase669():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase670():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase671():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase672():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase673():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase674():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase675():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase676():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase677():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase678():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase679():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase680():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase681():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase682():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase683():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = 0, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase684():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase685():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase686():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase687():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase688():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase689():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase690():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase691():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase692():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase693():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase694():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase695():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase696():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase697():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase698():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase699():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase700():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase701():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase702():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase703():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase704():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase705():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase706():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase707():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase708():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase709():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase710():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase711():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase712():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase713():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase714():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase715():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase716():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase717():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase718():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase719():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase720():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase721():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase722():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase723():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase724():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase725():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase726():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase727():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase728():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase729():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase730():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase731():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase732():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase733():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase734():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase735():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase736():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase737():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase738():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase739():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase740():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase741():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase742():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase743():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase744():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase745():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase746():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase747():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase748():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase749():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase750():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase751():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase752():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase753():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase754():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase755():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase756():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase757():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase758():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase759():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase760():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase761():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase762():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase763():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase764():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase765():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase766():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase767():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase768():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase769():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase770():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase771():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase772():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase773():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase774():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase775():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase776():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase777():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase778():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase779():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase780():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase781():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase782():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase783():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase784():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase785():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase786():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase787():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase788():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase789():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase790():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase791():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase792():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase793():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase794():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase795():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase796():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase797():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase798():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase799():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase800():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase801():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase802():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase803():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase804():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase805():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase806():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase807():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase808():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase809():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase810():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase811():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase812():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase813():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase814():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase815():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase816():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase817():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase818():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase819():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase820():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase821():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase822():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase823():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase824():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase825():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase826():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase827():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase828():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase829():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase830():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase831():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase832():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase833():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase834():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase835():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase836():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase837():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase838():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase839():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase840():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase841():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase842():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase843():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase844():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase845():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase846():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase847():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase848():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase849():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase850():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase851():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase852():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase853():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase854():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase855():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase856():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase857():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase858():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase859():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase860():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase861():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase862():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase863():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = NaN, milliseconds = Number.MAX_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MAX_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase864():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MAX_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase865():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase866():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase867():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase868():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase869():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase870():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase871():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase872():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase873():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase874():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase875():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase876():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase877():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase878():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase879():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase880():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase881():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase882():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase883():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase884():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase885():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase886():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase887():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase888():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase889():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase890():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase891():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase892():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase893():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase894():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase895():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase896():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase897():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase898():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase899():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = 0, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase900():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase901():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase902():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase903():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase904():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase905():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase906():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase907():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase908():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase909():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase910():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase911():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase912():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase913():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase914():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase915():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase916():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase917():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase918():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase919():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase920():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase921():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase922():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase923():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase924():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase925():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase926():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase927():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase928():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase929():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase930():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase931():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase932():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase933():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase934():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase935():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase936():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase937():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase938():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase939():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase940():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase941():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase942():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase943():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase944():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase945():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase946():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase947():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase948():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase949():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase950():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase951():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase952():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase953():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase954():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase955():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase956():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase957():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase958():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase959():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase960():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase961():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase962():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase963():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase964():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase965():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase966():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase967():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase968():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase969():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase970():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase971():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase972():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase973():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase974():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase975():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase976():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase977():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase978():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase979():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase980():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase981():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase982():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase983():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase984():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase985():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase986():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase987():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase988():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase989():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase990():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase991():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase992():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase993():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase994():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase995():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase996():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase997():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase998():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase999():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1000():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1001():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1002():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1003():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1004():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1005():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1006():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1007():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1008():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1009():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1010():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1011():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1012():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1013():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1014():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1015():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1016():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1017():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1018():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1019():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1020():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1021():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1022():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1023():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1024():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1025():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1026():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1027():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1028():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1029():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1030():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1031():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1032():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1033():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1034():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1035():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1036():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1037():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1038():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1039():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1040():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1041():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1042():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1043():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1044():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1045():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1046():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1047():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1048():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1049():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1050():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1051():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1052():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1053():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1054():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1055():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1056():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1057():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1058():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1059():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1060():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1061():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1062():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1063():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1064():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1065():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1066():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1067():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1068():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1069():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1070():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1071():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1072():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1073():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1074():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1075():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1076():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1077():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1078():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1079():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = NaN, milliseconds = Number.MIN_VALUE]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = Number.MIN_VALUE</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1080():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = Number.MIN_VALUE;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1081():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1082():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1083():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1084():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1085():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1086():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1087():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1088():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1089():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1090():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1091():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1092():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1093():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1094():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1095():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1096():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1097():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1098():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1099():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1100():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1101():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1102():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1103():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1104():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1105():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1106():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1107():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1108():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1109():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1110():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1111():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1112():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1113():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1114():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1115():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = 0, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = 0</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1116():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = 0;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1117():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1118():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1119():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1120():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1121():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1122():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1123():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1124():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1125():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1126():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1127():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1128():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1129():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1130():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1131():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1132():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1133():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1134():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1135():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1136():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1137():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1138():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1139():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1140():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1141():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1142():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1143():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1144():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1145():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1146():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1147():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1148():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1149():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1150():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1151():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.POSITIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.POSITIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1152():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.POSITIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1153():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1154():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1155():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1156():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1157():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1158():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1159():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1160():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1161():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1162():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1163():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1164():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1165():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1166():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1167():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1168():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1169():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1170():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1171():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1172():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1173():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1174():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1175():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1176():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1177():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1178():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1179():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1180():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1181():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1182():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1183():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1184():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1185():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1186():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1187():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.NEGATIVE_INFINITY, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1188():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.NEGATIVE_INFINITY;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1189():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1190():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1191():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1192():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1193():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1194():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1195():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1196():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1197():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1198():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1199():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1200():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1201():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1202():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1203():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1204():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1205():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1206():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1207():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1208():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1209():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1210():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1211():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1212():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1213():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1214():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1215():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1216():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1217():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1218():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1219():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1220():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1221():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1222():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1223():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.MAX_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MAX_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1224():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.MAX_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1225():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1226():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1227():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1228():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1229():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1230():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1231():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1232():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1233():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1234():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1235():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1236():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1237():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1238():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1239():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1240():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1241():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1242():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1243():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1244():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1245():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1246():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1247():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1248():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1249():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1250():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1251():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1252():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1253():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1254():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1255():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1256():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1257():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1258():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1259():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = Number.MIN_VALUE, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = Number.MIN_VALUE</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1260():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = Number.MIN_VALUE;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = 0, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1261():void
		{
			var hours:Number = 0;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = 0, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1262():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = 0, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1263():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = 0, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1264():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = 0, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1265():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = 0, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = 0</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1266():void
		{
			var hours:Number = NaN;
			var minutes:Number = 0;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1267():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1268():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1269():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1270():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1271():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.POSITIVE_INFINITY, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.POSITIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1272():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.POSITIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1273():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1274():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1275():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1276():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1277():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.NEGATIVE_INFINITY, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1278():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.NEGATIVE_INFINITY;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1279():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1280():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1281():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1282():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1283():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MAX_VALUE, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MAX_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1284():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MAX_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1285():void
		{
			var hours:Number = 0;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1286():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1287():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1288():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1289():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = Number.MIN_VALUE, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = Number.MIN_VALUE</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1290():void
		{
			var hours:Number = NaN;
			var minutes:Number = Number.MIN_VALUE;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = 0, minutes = NaN, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = 0</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1291():void
		{
			var hours:Number = 0;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.POSITIVE_INFINITY, minutes = NaN, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.POSITIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1292():void
		{
			var hours:Number = Number.POSITIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.NEGATIVE_INFINITY, minutes = NaN, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.NEGATIVE_INFINITY</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1293():void
		{
			var hours:Number = Number.NEGATIVE_INFINITY;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MAX_VALUE, minutes = NaN, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MAX_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1294():void
		{
			var hours:Number = Number.MAX_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = Number.MIN_VALUE, minutes = NaN, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = Number.MIN_VALUE</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1295():void
		{
			var hours:Number = Number.MIN_VALUE;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

		[Test (description="Boundary case: [hours = NaN, minutes = NaN, seconds = NaN, milliseconds = NaN]")]
		/**
		 * Test Case Type: Boundary<br/>
		 * <br/>
		 * INPUT VALUES:<br/>
		 * <code>hours = NaN</code><br/>
		 * <code>minutes = NaN</code><br/>
		 * <code>seconds = NaN</code><br/>
		 * <code>milliseconds = NaN</code><br/>
		 * <br/>
		 * OUTPUT EXPECTED:<br/>
		 * ---- expectations ----
		 *
		 */
		public function testCase1296():void
		{
			var hours:Number = NaN;
			var minutes:Number = NaN;
			var seconds:Number = NaN;
			var milliseconds:Number = NaN;
			var returnTestValue:Number = DateTimeUtil.getTime(hours, minutes, seconds, milliseconds);
			//---- Place result assertion here ----
			// You must replace this code by function specifications or 
			// the test always returns false!
			assertFalse(true);
			//-------------------------------------
		}

	}
}